1. vector
   介绍: 底层数据结构为数组(动态)，内部有三个指针，数组的起始指针、结尾指针，还有一个是容量指针，支持数组下标访问，通过容量指针进行动态扩容。
   缺点: 中间进行插入和删除会造成内存块的拷贝，扩容是也会进行内存的拷贝，尤其是维护类的话还会造成析构和构造，所以性能不高，不过对尾部元素的操作最快，而且不需要移动内存。
   优点: 经常随机访问的话请使用它。

2. map
   底层数据结构为红黑树，有序，不重复，如果使用内核提供的红黑树，你需要自己实现插入和查找函数，然后调用kernel提供的API rb_link_node和rb_insert_color进行re-balance
   kernel/msm-4.14/kernel/power/wakelock.c

3. list
   介绍: 线性双向链表结构，它的数据由若干个节点构成，每一个节点都包括一个信息块(即实际存储的数据)、一个前驱指针和一个后驱指针。
   缺点: 不能进行下标快速访问，相对于vector占用更多的内存。
   优点: 可以在任何位置快速地插入或删除，当然也可以在两端进行push和pop。
   ps: 双向链表的反转，
     一是将数据部分的pre指针和next指针交换值；
	 二是将h指针指向反转后的头数据节点指针，并将新链表的尾数据节点指针的next(即原链表头数据指针的next)置空

